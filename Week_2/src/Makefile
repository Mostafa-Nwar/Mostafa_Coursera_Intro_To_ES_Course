#******************************************************************************
# Copyright (C) 2017 by Alex Fosdick - University of Colorado
#
# Redistribution, modification or use of this software in source or binary
# forms is permitted as long as the files maintain this copyright. Users are 
# permitted to modify this and use it to learn about the field of embedded
# software. Alex Fosdick and the University of Colorado are not liable for any
# misuse of this material. 
#
#*****************************************************************************

#------------------------------------------------------------------------------
# Author : Mostafa Samir Nawar
# Date : 19/6/2018
# 
# Use: make [TARGET] [PLATFORM-OVERRIDES]
#
# Build Targets:
#	build : preprocessor, compile, link and locate the C source files \
		and generate the .map and .out files 
#	compile-all : preprocessor, compile only the all C source files \
		and generate a .o file for each C source code file 
#	clean : Delete all Generated files from generated by other Targets
#	Pattern-Matching:-
#		.i-.c: generate individual .i preprocessed files depending \
			 on C source code 
#		.o-.c: generate individual .o Compiled Files depending \
			on C source code 
#		.asm-.c:generate individual .asm assembly files depending \
			on the C source code 
#		.d-.c: generate individual .d dependencies files for C files
#		-asm-.out: Display Disassembly instructions from a given \
			excutable files 
#		
#
# Platform Overrides:
#      PLATFORM  : variable determining the PLATFORM either HOST or MSP432
#------------------------------------------------------------------------------
include sources.mk

# Platform Overrides
PLATFORM = HOST
#*************************************************************
# Architectures Specific Flags(ARM-MSP432)
LINKER_FILE =  msp432p401r.lds
CPU = cortex-m4
ARCH = thumb
MARCH = armv7e-m
ABI = hard
FPU = fpv4-sp-d16
SPECS = nosys.specs

#*************************************************************
# General GNU GCC Compiler Flags 
GEN_CFLAGS =-Wall -Werror -g -O0 -std=c99 
#*************************************************************
# Make a Conditional Checking to Differ between the 2 Platforms to 
# Apply the right specifications for each PLATFORM HOST or MSP432
ifeq ($(PLATFORM),HOST)
  CC = gcc
  LD = ld
  LDFLAGS = -Wl,-Map=c1m2.map
  CFLAGS = $(GEN_CFLAGS)
  CPPFLAGS = -DHOST
 # etc
else
  CC = arm-none-eabi-gcc
  LD = arm-none-eabi-ld
  LDFLAGS = -Wl,-T $(LINKER_FILE) -Wl,-Map=c1m2.map
  CFLAGS = $(GEN_CFLAGS) -mcpu=$(CPU) -m$(ARCH) -march=$(MARCH) -mfloat-abi=$(ABI) -mfpu=$(FPU) --specs=$(SPECS) 
  CPPFLAGS = -DMSP432
                # etc
endif
#*************************************************************
# Defining the Variables depending on the input Source files 
OBJECTS=$(SOURCES:.c=.o)
ASSEMBLS=$(SOURCES:.c=.asm)
PRE_PROS=$(SOURCES:.c=.i)
DEPENDSES=$(SOURCES:.c=.d)
#*************************************************************
# Make a Matching Rule to generate individual preprocessed Files from C code
%.i : %.c
	$(CC) $(CPPFLAGS) $(INCLUDES) $(CFLAGS) -E $< -o $@ 
#*************************************************************
# Make a Matching Rule to generate individual Object files from C code
%.o : %.c
	$(CC) $(CPPFLAGS) $(INCLUDES) $(CFLAGS) -c $< -o $@
#*************************************************************
# Make a Matching Rule to generate individual Assembly files from C code
%.asm : %.c
	$(CC) $(CPPFLAGS) $(INCLUDES) $(CFLAGS) -S $< -o $@
#*************************************************************
# Make a Matching Rule to Diplay the DisAssembly of .out file with objdump tool 
%.asm : %.out
	objdump -d $< 
#*************************************************************
# Make a dependencies-list file, file by file 
%.d : %.c 
	$(CC) $(CPPFLAGS) $(INCLUDES) $(CFLAGS) -M $< -o $@
#*************************************************************
# Make a Rule for Generating .out & .map file for selected Platform 
.PHONY: build
build : $(SOURCES)
	$(CC) $(CPPFLAGS) $(INCLUDES) $(CFLAGS) $(LDFLAGS) $^ -o c1m2.out
#*************************************************************
# Make a Rule for Generating all Object files for selected platform 
.PHONY: compile-all
compile-all : $(SOURCES)
	$(CC) $(CPPFLAGS) $(INCLUDES) $(CFLAGS) -c $^  
#*************************************************************
# Make a Rule to Clean all generated Files 
.PHONY: clean 
clean : 
	rm $(OBJECTS) $(ASSEMBLS) $(PRE_PROS) $(DEPENDSES) c1m2.map c1m2.out
